// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name     String?
  email    String   @unique
  password String
  role     UserRole @default(WORKER)

  // Other fields and relations
  dataPools    DataPool[]
  currentAlert Alert?

  reprCompanyId   String?
  workerCompanyId String?

  representativeOf Company? @relation("representative")
  workerOf         Company? @relation("workers", fields: [workerCompanyId], references: [id])

  @@map("users")
}

model Company {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name String

  machines Machine[]

  dataPools DataPool[]

  representative User   @relation("representative", fields: [representativeId], references: [id])
  workers        User[] @relation("workers")

  representativeId String @unique

  @@map("company")
}

model Machine {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  dockIp String

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  currentAlert Alert?

  @@map("machines")
}

model DataPool {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users        User[]
  workingHours WorkingHour[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  @@map("data_pools")
}

model WorkingHour {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dayOfWeek Int      @unique
  from      DateTime
  to        DateTime

  dataPool   DataPool @relation(fields: [dataPoolId], references: [id])
  dataPoolId String

  @@map("working_hours")
}

model Alert {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name               String
  avgMaintenanceTime Int
  currentStatus      Int // TODO change to some enum

  responsibleUser   User   @relation(fields: [responsibleUserId], references: [id])
  responsibleUserId String @unique

  machine   Machine @relation(fields: [machineId], references: [id])
  machineId String  @unique

  @@map("alerts")
}

enum UserRole {
  ADMIN
  MANAGER
  WORKER
}

enum MachineStatus {
  CREATED
}
